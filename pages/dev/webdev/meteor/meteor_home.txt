#Meteor Framework - Home Page
[[https://www.meteor.com]]

Il framework Meteor è un framework full stack per la creazione di webapp SPA con tecnologia Javascript (client + server), HTML5, CSS3 e MongoDB.
Rispetto ad altri framework, come Electron, questo permette di gestire in un unico ambiente e con un unico linguaggio sia la parte di backend (server) che la parte di frontend (browser). Inoltre l'interazione tra client e server tramite chiamate AJAX e altre tecnologie è resa trasparente e ampiamente facilitata dal framework stesso.

Infine, tramite Meteor, è possibile creare anche applicazioni mobile (Android e iOS) che sfruttino la stessa tecnologia usata per il browser.

Sono poi possibili integrazioni tra Meteor ed Electron per la creazione di applicazioni desktop (...)
## Quick Start
Assicurarsi di avere installato Meteor (...)

Creare una nuova applicazione:
<code>
meteor create helloWorld

helloWorld created:

├── client
│   ├── main.css
│   ├── main.html
│   └── main.js
├── .gitignore
├── package.json
└── server
    └── main.js

</code>

start the application
<code>
meteor run [--port 8080]
</code>
Un server node/js verrà avviato sulla porta specificata (o sulla porta **3000** se non specificato) e un'istanza **MongoDB** sulla porta **3001**.



## Architettura di sistema e tecnologie
**Meteor** è un framework fullstack, quindi utile sia per sviluppare la parte client che la parte backend/webservices.

Si appoggia su **Node.js** + **MongoDB** e per la parte di UI utilizza **Blaze**.

Inoltre **Meteor CLI** fornisce una serie di tools agli sviluppatori per impostare velocemente un progetto e per l'intero workflow di sviluppo.

Meteor include anche un mini-database che simula le stesse API di MongoDB. All'interno del browser è quindi possibile usare **Minimongo** con gli stessi comandi della console MongoDB.

Meteor fa in modo che le elaborazioni del DOM vengano fatte direttamente sul browser. Vengono quindi scambiati solo i dati e la sincronizzazione tra server e browser avviene tramite Web Socket e un protocollo standard: //Distributed Data Protocol (DDP)//.

Tutti i componenti di Meteor, dal DB alla UI del client, sono reattivi, quindi i dati vengono sincronizzati tra i vari client in real time, senza necessità di preoccuparsi manualmente del refresh.


### Event loop & callbacks
Le webapp scritte con Meteor sono //single-thread// e quindi le operazioni sono sincrone. Eventuali operazioni bloccanti devono quindi essere gestite attraverso callback via Node.js.

Il flusso sincrono in Node.js è detto **event loop** ed è quello che processa la coda delle richieste utente (events).

Per semplificare questo sistema Meteor utilizza **fibers**, che fornisce un abstraction layer che esegue i task asincroni in sequenza, eliminando la necessità di gestire esplicitamente i callback.


### Come lavora Meteor
Un'applicazione Meteor consiste in una business logic (codice + templates + stylesheet + assets) e una serie di packages, compilati per la piattaforma target usando **isobuild**. I packages servono a implementare funzionalità standard quali autenticazione, scambio dati, ecc.

Oltre i tools classici come npm e Cordova, Meteor usa un sistema di packages custom chiamati //Isopacks//.

{{ :dev:webdev:meteor:meteor1.jpg?direct |}}

Le webapp comunicano attraverso HTTP + WebSockets (DDP), basandosi su SockJS. 

Il client chiama funzioni sul server usando RPC e il server restituisce la risposta in oggetti JSON.

Ogni client può sottoscrivere una certa **"data publication"**; Il componente **Livequery** si occupa di eseguire il push di ogni cambiamento ad un dataset via DDP.

La libreria **Tracker** intercetta questi cambiamenti e aggiorna il DOM, aggiornando quindi la UI via **Blaze**.

{{ :dev:webdev:meteor:meteor2.jpg?direct |}}

### Approfondimenti:

  * [[dev:webdev:meteor:core-projects|Core Projects]]
  * [[dev:webdev:meteor:cli-tools|Isobuild & CLI tool]]
  * [[dev:webdev:meteor:client-server-code|Client code vs server code]]

## Come scrivere le applicazioni
  * [[dev:webdev:meteor:helloWorld|helloWorld application]]
  * [[dev:webdev:meteor:templates|Working with templates]]
  * [[dev:webdev:meteor:bestpractices|Best Practices]]

## IDE e tools di sviluppo

### Brackets

### Vim
#### Plugins
  * [[https://github.com/Slava/tern-meteor|TernJS for Meteor]]    
  * [[https://www.youtube.com/watch?v=TIE9ZOqlvFo|video]]
  * [[https://github.com/cmather/vim-meteor-snippets|VIM Meteor Snippets]]
  * [[https://github.com/cmather/dotvim|VIM Configuration]]

### Atom
[[https://atom.io/]]

#### Packages & Plugins
  * Meteor API: syntax highlighting, snippets and autocomplete
  * Meteor Helper: pulsanti integrati per avvio/arresto di meteor



### Kadira
[[https://kadira.io/]]
Kadira Platform helps you to optimize your Meteor app.


### Velocity
[[https://velocity.readme.io/]]
The reactive test-runner for Meteor. Velocity is a community as well as a testing framework that allows for common testing components to be shared across different testing frameworks. The packages include: Mocha, Jasmine, Cucumber, Casper, and Robot.


# Risorse e tutorial
  * [[https://www.meteor.com/tutorials|Tutorial ufficiali sul sito del progetto Meteor]]
  * 
~~ Da Verificare ~~

